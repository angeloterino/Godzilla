@model StrawmanApp.Models.ChartModel
<div style="display:table-row">
<div class="chart_wrapper" style="width:1380px; border:2px solid rgb(255,0,0);">
<div class="chart_title" style="margin: 20px; height:35px; font-family:Arial; font-size:21px; font-weight:bold; background-color:rgb(255,0,0); color:rgb(255,255,255);position:relative;padding-left:20px;">
@ViewBag.ChartTitle<div style="float:right; margin-right:20px;">Data up to February 2015</div>
</div>
<table style="font-size:1.6em; margin:0 auto;" class="chart">
<thead>
<tr>
<th colspan="3" style="width:14.15%;">2015 MAT Market Size<br />($ MM)</th>
<th colspan="3" style="width:14.15%;">2015 MAT Market Size<br />($ MM)</th>
<th colspan="3" style="width:14.15%;">2015 MAT Market <br />Share (%)</th>
<th>2015 YTD Market <br />Share (%)</th>
<th>2015 LM Market <br />Share (%)</th>
<th style="width:1%"></th>
<th>2015 MAT <br />Growth (%)</th>
<th>2015 YTD <br />Growth (%)</th>
<th>2014 LM <br />Growth (%)</th>
</tr>
</thead>
<tbody>
@{
    StrawmanApp.Models.ChartGenericModel gen_m, gen_mt,gen_ms, gen_l, gen_y, gen_p, gen_pg;
StrawmanApp.Models.ChartModel _chart = Model;
foreach (StrawmanApp.Models.ChartByChannelModels item in ViewBag.ChartModel)
{
    StrawmanApp.Models.ChartByChannelModels item_m = _chart.chart_mat.Find(m => ((m.market == (item.market + 10000) && m.brand == (item.brand + 10000)) || (item.brand > 90000 && m.market == item.market && m.brand == item.brand)) && m.vgroup == item.vgroup);
    StrawmanApp.Models.ChartByChannelModels item_mt = _chart.chart_mat.Find(m => ((m.market == item.market + 1000 && m.brand == item.brand + 1000) || (item.brand > 90000 && m.market == item.market && m.brand == item.brand)) && m.vgroup == item.vgroup);
    StrawmanApp.Models.ChartByChannelModels item_ms = _chart.chart_mat.Find(m => m.market == item.market && m.brand == item.brand && m.vgroup == item.vgroup);
    StrawmanApp.Models.ChartByChannelModels item_l = _chart.chart_lm.Find(m => m.market == item.market && m.brand == item.brand && m.vgroup == item.vgroup);
    StrawmanApp.Models.ChartByChannelModels item_y = _chart.chart_ytd.Find(m => m.market == item.market && m.brand == item.brand && m.vgroup == item.vgroup);
    if (item_m != null)
    {
        gen_m = new StrawmanApp.Models.ChartGenericModel
            {
                channel_name = item_m.channel_name,
                brand = item_m.brand,
                market = item_m.market,
                vgroup = item_m.vgroup,
                _size = item_m.mat_market_size,
                _size_pc = item_m.mat_market_size_pc,
                _share_l = item_m.mat_market_share_l,
                _share_l_pc = item_m.mat_market_share_l_pc,
                _share_p = item_m.mat_market_share_p,
                _share_p_pc = item_m.mat_market_share_p_pc,
                _grouth_c = item_m.mat_grouth_c,
                _grouth_c_pc = item_m.mat_grouth_c_pc,
                _grouth_jj = item_m.mat_grouth_jj,
                _grouth_jj_pc = item_m.mat_grouth_jj_pc
            };
    }
    else
    {
        gen_m = new StrawmanApp.Models.ChartGenericModel();
    }
    if (item_mt != null)
    {
        gen_mt = new StrawmanApp.Models.ChartGenericModel
        {
            channel_name = item_mt.channel_name,
            brand = item_mt.brand,
            market = item_mt.market,
            vgroup = item_mt.vgroup,
            _size = item_mt.mat_market_size,
            _size_pc = item_mt.mat_market_size_pc,
            _share_l = item_mt.mat_market_share_l,
            _share_l_pc = item_mt.mat_market_share_l_pc,
            _share_p = item_mt.mat_market_share_p,
            _share_p_pc = item_mt.mat_market_share_p_pc,
            _grouth_c = item_mt.mat_grouth_c,
            _grouth_c_pc = item_mt.mat_grouth_c_pc,
            _grouth_jj = item_mt.mat_grouth_jj,
            _grouth_jj_pc = item_mt.mat_grouth_jj_pc
        };
    }
    else
    {
        gen_mt = new StrawmanApp.Models.ChartGenericModel();
    }
    gen_ms = new StrawmanApp.Models.ChartGenericModel
    {
        channel_name = item_ms.channel_name,
        brand = item_ms.brand,
        market = item_ms.market,
        vgroup = item_ms.vgroup,
        _size = null,
        _size_pc = item_ms.mat_market_size_pc,
        _share_l = item_ms.mat_market_share_l,
        _share_l_pc = item_ms.mat_market_share_l_pc,
        _share_p = item_ms.mat_market_share_p,
        _share_p_pc = item_ms.mat_market_share_p_pc,
        _grouth_c = item_ms.mat_grouth_c,
        _grouth_c_pc = item_ms.mat_grouth_c_pc,
        _grouth_jj = item_ms.mat_grouth_jj,
        _grouth_jj_pc = item_ms.mat_grouth_jj_pc
    };
    gen_l = new StrawmanApp.Models.ChartGenericModel
    {
        channel_name = item_l.channel_name,
        brand = item_l.brand,
        market = item_l.market,
        vgroup = item_l.vgroup,
        _size = null,
        _size_pc = item_l.mat_market_size_pc,
        _share_l = item_l.lm_market_share_l,
        _share_l_pc = item_l.lm_market_share_l_pc,
        _share_p = item_l.lm_market_share_p,
        _share_p_pc = item_l.lm_market_share_p_pc,
        _grouth_c = item_l.lm_grouth_c,
        _grouth_c_pc = item_l.lm_grouth_c_pc,
        _grouth_jj = item_l.lm_grouth_jj,
        _grouth_jj_pc = item_l.lm_grouth_jj_pc
    };

    gen_y = new StrawmanApp.Models.ChartGenericModel
    {
        channel_name = item_y.channel_name,
        brand = item_y.brand,
        market = item_y.market,
        vgroup = item_y.vgroup,
        _size = null,
        _size_pc = item_y.mat_market_size_pc,
        _share_l = item_y.ytd_market_share_l,
        _share_l_pc = item_y.ytd_market_share_l_pc,
        _share_p = item_y.ytd_market_share_p,
        _share_p_pc = item_y.ytd_market_share_p_pc,
        _grouth_c = item_y.ytd_grouth_c,
        _grouth_c_pc = item_y.ytd_grouth_c_pc,
        _grouth_jj = item_y.ytd_grouth_jj,
        _grouth_jj_pc = item_y.ytd_grouth_jj_pc
    };
    
    <tr>
        @{Html.RenderPartial("~/Views/ChartGeneric/_Header.cshtml", gen_m);//Size by Channel          
        }
        @{Html.RenderPartial("~/Views/ChartGeneric/_Header.cshtml", gen_mt);//Size by Cagetory          
        }
        @{Html.RenderPartial("~/Views/ChartGeneric/_Header.cshtml", gen_ms);//Share by MAT
        }
        @{ Html.RenderPartial("~/Views/ChartGeneric/_Share.cshtml", gen_y);//Share by YTD
        }
        @{ Html.RenderPartial("~/Views/ChartGeneric/_Share.cshtml", gen_l);//Share by MTG
        }
        <td>&nbsp;</td>
        @{Html.RenderPartial("~/Views/ChartGeneric/_Growth.cshtml", gen_ms);}
        @{Html.RenderPartial("~/Views/ChartGeneric/_Growth.cshtml", gen_y);}
        @{Html.RenderPartial("~/Views/ChartGeneric/_Growth.cshtml", gen_l);}
    </tr>
}
}
</tbody>
</table>
<div class="clear" style="clear:both;"></div>
</div>
<div class="chart_wrapper" style="width:750px; border:2px solid rgb(255,0,0);margin-left:40px;">
<div class="chart_title" style="margin: 20px; height:35px; font-family:Arial; font-size:21px; font-weight:bold; background-color:rgb(255,0,0); color:rgb(255,255,255);position:relative;padding-left:20px; text-align:center; overflow:hidden;">
@ViewBag.ChartTitle
</div>
<table style="font-size:1.6em; margin:0 auto;" class="chart">
<thead>
<tr>
<th style="width:24%;" colspan="3">2015 MAT Market Size<br />($ MM)</th>
<th>2015 PBP Market <br />Share (%)</th>
<th style="width:5%"></th>
<th>2015 PBP <br />Growth (%)</th>
</tr>
</thead>
<tbody>
@foreach (StrawmanApp.Models.ChartByChannelModels item in ViewBag.ChartModel)
{
    StrawmanApp.Models.ChartByChannelModels item_p = _chart.chart_pbp.Find(m => m.market == item.market && m.brand == item.brand && m.vgroup == item.vgroup);    
    gen_p = new StrawmanApp.Models.ChartGenericModel
        {
            channel_name = item_p.channel_name,
            brand = item_p.brand,
            market = item_p.market,
            vgroup = item_p.vgroup,
            _size = (decimal)item_p.pbp_market_size,
            _size_pc = item_p.pbp_market_size_pc,
            _share_l = item_p.pbp_share_l,
            _share_l_pc = item_p.pbp_share_l_pc,
            _share_p = item_p.pbp_share_p,
            _share_p_pc = item_p.pbp_share_p_pc,
            _grouth_c = item_p.pbp_grouth_c,
            _grouth_c_pc = item_p.pbp_grouth_c_pc,
            _grouth_jj = item_p.pbp_grouth_jj,
            _grouth_jj_pc = item_p.pbp_grouth_jj_pc
        };    
    gen_pg = new StrawmanApp.Models.ChartGenericModel
    {
        channel_name = item_p.channel_name,
        brand = item_p.brand,
        market = item_p.market,
        vgroup = item_p.vgroup,
        _size = null,
        _size_pc = item_p.pbp_market_size_pc,
        _share_l = item_p.pbp_share_l,
        _share_l_pc = item_p.pbp_share_l_pc,
        _share_p = item_p.pbp_share_p,
        _share_p_pc = item_p.pbp_share_p_pc,
        _grouth_c = item_p.pbp_grouth_c,
        _grouth_c_pc = item_p.pbp_grouth_c_pc,
        _grouth_jj = item_p.pbp_grouth_jj,
        _grouth_jj_pc = item_p.pbp_grouth_jj_pc
    };
    <tr>
        @{Html.RenderPartial("~/Views/ChartGeneric/_Header.cshtml", gen_p);}
        @{Html.RenderPartial("~/Views/ChartGeneric/_Share.cshtml", gen_pg);}
        <td>&nbsp;</td>
        @{Html.RenderPartial("~/Views/ChartGeneric/_Growth.cshtml", gen_pg);}
    </tr>
    
}
</tbody>
</table>
<div class="clear" style="clear:both;"></div>
</div>
<div class="clear" style="clear:both;"></div>
</div>