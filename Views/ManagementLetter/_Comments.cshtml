@model List<StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS>
@{
    string channel_name = "";
    List<StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS> lst1 = Model.Where(m => m.MAIN_GROUP <= 1).Select(m => m).ToList();
    List<StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS> lst2 = Model.Where(m => m.MAIN_GROUP > 1).Select(m => m).ToList();
    List<StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS> lst3 = Model.Where(m => !Model.Exists(s=>s.GROUP_ID == m.MAIN_GROUP)).Select(m => m).ToList();
    List<StrawmanDBLibray.Entities.LETTERS_COMMENT_DATA> data = ViewBag.LettersData;
    string style_red = StrawmanApp.Helpers.StrawmanConstants.Colors.Red;

    <table class="table" id="letters1" style="display:table">
        <tbody>           
        @{channel_name = "";
          foreach (StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS item in lst1)
          {
            //Nivel 1
            string border_transparent = "";
            if (lst1.IndexOf(item) != lst1.Count - 1)
            {
                border_transparent = "border-bottom-color:transparent;";
            }else{
                border_transparent = "";
            }
            List<StrawmanDBLibray.Entities.LETTERS_COMMENT_DATA> letters = data.Select(m => m).ToList();
            if(lst1.IndexOf(item) > 0)
            {
            <tr class="table-row" style="display:table-row">
                <td class="table-cell" style="display:table-cell;font-weight:bold;border:0;" colspan="2">&nbsp;</td>
            </tr> 
            }
            <tr class="table-row" style="display:table-row">
                <td class="table-cell" style="display:table-cell; font-weight:bold;width:120px;color:@style_red" colspan ="2">
                    @Html.DisplayFor(m => item.NAME)
                </td>
            </tr>
            <tr class="table-row" style="display:table-row" data-type="level1">
                <td class="table-cell" style="display:table-cell" colspan="2">
                    @{Html.RenderAction("GetCommentWrapper", new { item = item, letters = letters, get_child = false });}
                </td>
            </tr>
            if(lst2.Exists(m => m.MAIN_GROUP == item.ID)){
            <tr class="table-row" style="display:table-row" data-type="level2">
            <td class="table-cell" style="display:table-cell; padding:0; margin:0; border:0; border-spacing:0; border-collapse:collapse; padding-left:15px;">    
            @foreach (StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS son in lst2.Where(m => m.MAIN_GROUP == item.ID))
            {
                if (lst2.Where(m => m.MAIN_GROUP == item.ID).ToList().IndexOf(son) == lst2.Where(m => m.MAIN_GROUP == item.ID).ToList().Count - 1)
                {
                    border_transparent = "";
                }
                else
                {
                    border_transparent = "";
                }
                bool has_child = lst2.Exists(m => m.MAIN_GROUP == son.GROUP_ID);
                bool has_parent = lst2.Exists(m => m.GROUP_ID == son.MAIN_GROUP);
                bool level2 = false;
                //Nivel 2
            <table class="table" style="display:table; margin-top:-1px;">
                <tbody>
                @{Html.RenderPartial("~/Views/ManagementLetter/_SonRow.cshtml", new ViewDataDictionary { { "style_red", style_red }, { "has_child", has_child },{"has_parent",has_parent}, { "letters_son", letters},{"son",son},{"level2",level2},{"bottom-transparent", border_transparent} });}
                @{
                StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS _this = son;
                List<StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS> childs = null;
                StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS _next = null;                                    
                while(has_child){
                    if(childs== null){childs = lst2.FindAll(m=>m.MAIN_GROUP == _this.GROUP_ID);}
                    string border_bottom = "border-bottom: 0;";                    
                    foreach(StrawmanDBLibray.Entities.v_WRK_MANAGEMENT_LETTERS child in childs){
                        if (childs.IndexOf(child) == 0)
                        {
                            border_transparent = "border-top:1px solid black;";
                            border_bottom = "";
                        }
                        else
                        {
                            border_transparent = "";
                        }
                        has_child = lst2.Exists(m => m.MAIN_GROUP == child.GROUP_ID);
                        has_parent = lst2.Exists(m => m.GROUP_ID == child.MAIN_GROUP);
                        //Subniveles
                        <tr class="table-row" style="display:table-row">                            
                             <td class="table-cell" style="display:table-cell; padding:0;padding-left:15px;border:0; border-spacing:0; border-collapse:collapse;">
                                 <table class="table" style="display:table; margin-top:-1px;">
                                    <tbody>
                                        @{Html.RenderPartial("~/Views/ManagementLetter/_SonRow.cshtml", new ViewDataDictionary { { "style_red", style_red }, { "has_child", has_child }, { "has_parent", has_parent }, { "letters_son",letters }, { "son", child }, { "level2", level2 }, { "bottom-transparent", border_transparent } });}
                                    </tbody>
                                </table>
                             </td>
                        </tr>
                            if(has_child){
                                _next = childs.Count > childs.IndexOf(child) + 1?childs.ElementAt(childs.IndexOf(child) + 1):null;
                                _this = child; level2 = true;
                                childs = null;
                                break;
                            }
                        }
                        if (_next != null && !has_child)
                        {
                            childs = lst2.Where(m => m.MAIN_GROUP == _next.MAIN_GROUP && m.GROUP_ID >= _next.GROUP_ID).ToList();
                            _next = null; level2 = false;
                            has_child = true;
                        }
                    }
                }
                </tbody></table>
            }
                </td>

            </tr>
            }
        }
    }
        </tbody>
    </table>
}
  